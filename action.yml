name: ReleaseManager Production
description: Automate production releases with versioning. Streamline deployments for efficient and controlled updates.

branding:
  icon: 'git-merge'
  color: 'gray-dark'

inputs:
  production_branch:
    description: 'The name of the production branch'
    required: true
  github_token:
    description: 'GitHub token for accessing repository'
    required: true
  heroku_api_key:
    description: 'API key for accessing Heroku'
    required: true
  heroku_app_name:
    description: 'Name of the Heroku app'
    required: true
  slack_api_token:
    description: 'API token for accessing Slack'
    required: true
  slack_channel_id:
    description: 'ID of the Slack channel'
    required: true
  display_name:
    description: 'Display name for Slack messages'
    required: true
  pat:
    description: 'Personal access token for GitHub'
    required: true
  pull_request_head_ref:
    description: 'Pull Request head ref'
    required: true
  actor:
    description: 'Github actor'
    required: true
  pull_request_base_sha:
    description: 'Pull Request base sha'
    required: true
  pull_request_current_sha:
    description: 'Pull Request current sha'
    required: true
  github_organizations:
    description: 'GitHub organization name'
    required: true
  github_repository:
    description: 'GitHub repository name'
    required: true

outputs:
  latest-tag:
    description: "Latest Tag"
    value: ${{ steps.set-variables.outputs.latest-tag }}
  release-tag:
    description: "Release Tag"
    value: ${{ steps.set-variables.outputs.release-tag }}
  next-release-tag:
    description: "Next Release Tag"
    value: ${{ steps.set-variables.outputs.next-release-tag }}

runs:
  using: "composite"
  steps:
  - name: Checkout Production Branch
    uses: actions/checkout@v4
    with:
      repository: github.event.inputs.github_organizations/github.event.inputs.github_repository
      ref: github.event.inputs.production_branch
      fetch-depth: 0
      token: github.event.inputs.pat

  - name: Set Variables
    id: set-variables
    shell: bash
    env:
      GH_TOKEN: github.event.inputs.github_token
      PULL_REQUEST_HEAD_REF: github.event.inputs.pull_request_head_ref
    run: |
      daily_deploy=false
      if [[ $PULL_REQUEST_HEAD_REF == "dev" ]]; then
        daily_deploy=true
      fi

      LATEST_TAG=$(gh release view --json tagName -q .tagName)

      major=$(echo $LATEST_TAG | cut -d. -f1)
      minor=$(echo $LATEST_TAG | cut -d. -f2)
      patch=$(echo $LATEST_TAG | cut -d. -f3)

      if $daily_deploy; then
        ((minor=minor+1))
        patch=0
      else
        ((patch=patch+1))
      fi

      RELEASE_TAG="$major.$minor.$patch"

      ((minor=minor+1))

      NEXT_RELEASE_TAG="$major.$minor.0"

      echo "latest-tag=$(echo $LATEST_TAG)" >> $GITHUB_OUTPUT
      echo "release-tag=$(echo $RELEASE_TAG)" >> $GITHUB_OUTPUT
      echo "next-release-tag=$(echo $NEXT_RELEASE_TAG)" >> $GITHUB_OUTPUT

  - name: Deploy to Heroku
    uses: akhileshns/heroku-deploy@v3.13.15
    with:
      heroku_api_key: github.event.inputs.heroku_api_key
      heroku_app_name: github.event.inputs.heroku_app_name
      heroku_email: github.event.inputs.actor@users.noreply.github.com

  - name: Create Release Tag
    shell: bash
    env:
      PULL_REQUEST_BASE_SHA: github.event.inputs.pull_request_base_sha
      PULL_REQUEST_CURRENT_SHA: github.event.inputs.current_sha
      GH_TOKEN: github.event.inputs.github_token
      GITHUB_REPOSITORY: github.event.inputs.github_repository
      PRODUCTION_BRANCH: github.event.inputs.production_branch
    run: |
      COMMITS=$(git log --pretty=format:'- %s' $PULL_REQUEST_BASE_SHA..$PULL_REQUEST_CURRENT_SHA --no-merges --reverse)
      BODY=$(printf "%s\n\nFull Changelog: %s" "$COMMITS" "[$LATEST_TAG...$RELEASE_TAG](https://github.com/LeCollectionist/$GITHUB_REPOSITORY/compare/$LATEST_TAG...$RELEASE_TAG)")
      gh release create $RELEASE_TAG --target $PRODUCTION_BRANCH --notes "$BODY" --title $RELEASE_TAG

  - name: Send message to Slack
    shell: bash
    env:
      PULL_REQUEST_BASE_SHA: github.event.inputs.pull_request_base_sha
      PULL_REQUEST_CURRENT_SHA: github.event.inputs.current_sha
      DISPLAY_NAME: github.event.inputs.display_name
      SLACK_CHANNEL_ID: github.event.inputs.slack_channel_id
      SLACK_API_TOKEN: github.event.inputs.slack_api_token
    run: |
      COMMITS=$(git log --pretty=format:'- %s' $PULL_REQUEST_BASE_SHA..$PULL_REQUEST_CURRENT_SHA --no-merges --reverse)
      PAYLOAD='{"text":"<!here> Deploy `$DISPLAY_NAME` - Version '$RELEASE_TAG'\n```'"$COMMITS"'```", "channel":"'"$SLACK_CHANNEL_ID"'"}'
      curl -X POST -H "Content-type: application/json" -H "Authorization: Bearer $SLACK_API_TOKEN" --data "$PAYLOAD" "https://slack.com/api/chat.postMessage"

  - name: Checkout Dev
    uses: actions/checkout@v4
    with:
      repository: github.event.inputs.github_organizations/github.event.inputs.github_repository
      ref: dev
      fetch-depth: 0
      token: github.event.inputs.pat

  - name: Rebase Production Branch into Dev
    if: github.event.inputs.pull_request_head_ref != 'dev'
    shell: bash
    env:
      ACTOR: github.event.inputs.actor
      PRODUCTION_BRANCH: github.event.inputs.production_branch
    run: |
      git config user.name "$ACTOR"
      git config user.email "$ACTOR@users.noreply.github.com"

      git rebase origin/$PRODUCTION_BRANCH

      if [ $? -eq 0 ] && [ -z "$(git diff origin/dev)" ]; then
        git push -f origin dev
      fi

  - name: Update Version Configuration on Dev
    if: github.event.inputs.pull_request_head_ref == 'dev'
    shell: bash
    env:
      ACTOR: github.event.inputs.actor
    run: |
      sed -i "s/config.app_version = \"[^\"]*\"/config.app_version = \"$NEXT_RELEASE_TAG\"/" ./config/initializers/bugsnag.rb

      git config user.name "$ACTOR"
      git config user.email "$ACTOR@users.noreply.github.com"

      git add ./config/initializers/bugsnag.rb
      git commit -m "chore(app-version): Bump app version to $NEXT_RELEASE_TAG"
      git push origin dev

  - name: Create Daily Pull Request
    if: github.event.inputs.pull_request_head_ref == 'dev'
    shell: bash
    env:
      GH_TOKEN: github.event.inputs.github_token
      PRODUCTION_BRANCH: github.event.inputs.production_branch
    run: |
      gh pr create --base $PRODUCTION_BRANCH --head dev --title "$PRODUCTION_BRANCH < Dev" --body "$(cat .github/PULL_REQUEST_TEMPLATE/TEMPLATE_FOR_PRODUCTION.md)"
