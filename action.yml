name: Release Manager Production
description: Automate production releases with versioning. Streamline deployments for efficient and controlled updates.

branding:
  icon: 'git-merge'
  color: 'gray-dark'

inputs:
  github_token:
    description: 'GitHub token for accessing the repository'
    required: true
  heroku_api_key:
    description: 'API key for accessing Heroku'
    required: true
  slack_api_token:
    description: 'API token for accessing Slack'
    required: true
  slack_channel_id:
    description: 'ID of the Slack channel'
    required: true
  pat:
    description: 'Personal access token for GitHub'
    required: true
  pull_request_base_sha:
    description: 'SHA of the base commit of the pull request'
    required: true
  pull_request_head_ref:
    description: 'Ref of the head commit of the pull request'
    required: true
  pull_request_head_sha:
    description: 'SHA of the head commit of the pull request'
    required: true
  actor:
    description: 'GitHub actor initiating the action'
    required: true
  display_name:
    description: 'Display name for Slack messages'
    required: true
  github_repo_full_name:
    description: 'Full name of the GitHub repository'
    required: true
  heroku_app_name:
    description: 'Name of the Heroku app'
    required: true
  production_branch:
    description: 'Name of the production branch'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout Production Branch
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.github_repo_full_name }}
        ref: ${{ inputs.production_branch }}
        fetch-depth: 0
        token: ${{ inputs.pat }}

    - name: Set Variables
      id: set-variables
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
        PULL_REQUEST_HEAD_REF: ${{ inputs.pull_request_head_ref }}
      run: |
        is_hotfix=true
        if [[ $PULL_REQUEST_HEAD_REF == "dev" ]]; then
          is_hotfix=false
        fi

        LATEST_TAG=$(gh release view --json tagName -q .tagName)

        major=$(echo $LATEST_TAG | cut -d. -f1)
        minor=$(echo $LATEST_TAG | cut -d. -f2)
        patch=$(echo $LATEST_TAG | cut -d. -f3)

        if $is_hotfix; then
          ((patch=patch+1))
        else
          ((minor=minor+1))
          patch=0
        fi

        RELEASE_TAG="$major.$minor.$patch"

        ((minor=minor+1))

        NEXT_RELEASE_TAG="$major.$minor.0"

        echo "latest-tag=$(echo $LATEST_TAG)" >> $GITHUB_ENV
        echo "release-tag=$(echo $RELEASE_TAG)" >> $GITHUB_ENV
        echo "next-release-tag=$(echo $NEXT_RELEASE_TAG)" >> $GITHUB_ENV

    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.13.15
      with:
        heroku_api_key: ${{ inputs.heroku_api_key }}
        heroku_app_name: ${{ inputs.heroku_app_name }}
        heroku_email: ${{ inputs.actor }}@users.noreply.github.com

    - name: Create Release Tag
      shell: bash
      env:
        PULL_REQUEST_BASE_SHA: ${{ inputs.pull_request_base_sha }}
        PULL_REQUEST_HEAD_SHA: ${{ inputs.pull_request_head_sha }}
        LATEST_TAG: ${{ env.latest-tag }}
        RELEASE_TAG: ${{ env.release-tag }}
        GH_TOKEN: ${{ inputs.github_token }}
        GITHUB_REPOSITORY: ${{ inputs.github_repo_full_name }}
        PRODUCTION_BRANCH: ${{ inputs.production_branch }}
      run: |
        COMMITS=$(git log --pretty=format:'- %s' $PULL_REQUEST_BASE_SHA..$PULL_REQUEST_HEAD_SHA --no-merges --reverse)
        BODY=$(printf "%s\n\nFull Changelog: %s" "$COMMITS" "[$LATEST_TAG...$RELEASE_TAG](https://github.com/$GITHUB_REPOSITORY/compare/$LATEST_TAG...$RELEASE_TAG)")
        gh release create $RELEASE_TAG --target $PRODUCTION_BRANCH --notes "$BODY" --title $RELEASE_TAG

    - name: Send message to Slack
      shell: bash
      env:
        PULL_REQUEST_BASE_SHA: ${{ inputs.pull_request_base_sha }}
        PULL_REQUEST_HEAD_SHA: ${{ inputs.pull_request_head_sha }}
        DISPLAY_NAME: ${{ inputs.display_name }}
        RELEASE_TAG: ${{ env.release-tag }}
        SLACK_CHANNEL_ID: ${{ inputs.slack_channel_id }}
        SLACK_API_TOKEN: ${{ inputs.slack_api_token }}
      run: |
        COMMITS=$(git log --pretty=format:'- %s' $PULL_REQUEST_BASE_SHA..$PULL_REQUEST_HEAD_SHA --no-merges --reverse)
        COMMITS=$(echo "$COMMITS" | sed 's/"/\\"/g')
        PAYLOAD='{"text":"<!here> Deploy `'$DISPLAY_NAME'` - Version '$RELEASE_TAG'\n```'"$COMMITS"'```", "channel":"'"$SLACK_CHANNEL_ID"'"}'
        curl -X POST -H "Content-type: application/json" -H "Authorization: Bearer $SLACK_API_TOKEN" --data "$PAYLOAD" "https://slack.com/api/chat.postMessage"

    - name: Checkout Dev
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.github_repo_full_name }}
        ref: dev
        fetch-depth: 0
        token: ${{ inputs.pat }}

    - name: Rebase Production Branch into Dev OR Update Version Configuration and Create Next Release Pull Request
      shell: bash
      env:
        ACTOR: ${{ inputs.actor }}
        NEXT_RELEASE_TAG: ${{ env.next-release-tag }}
        PRODUCTION_BRANCH: ${{ inputs.production_branch }}
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        git config user.name "$ACTOR"
        git config user.email "$ACTOR@users.noreply.github.com"

        if [ "${{ inputs.pull_request_head_ref }}" != 'dev' ]; then
          # Rebase Production Branch into Dev
          git rebase origin/$PRODUCTION_BRANCH

          if [ $? -eq 0 ] && [ -z "$(git diff origin/dev)" ]; then
            git push -f origin dev
          fi
        else
          # Update Version Configuration on Dev
          if [ -f "./config/initializers/bugsnag.rb" ]; then
            sed -i "s/config.app_version = \"[^\"]*\"/config.app_version = \"$NEXT_RELEASE_TAG\"/" ./config/initializers/bugsnag.rb
            git add ./config/initializers/bugsnag.rb
          fi

          if [ -f "./package.json" ]; then
            sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$NEXT_RELEASE_TAG\"/" ./package.json
            git add ./package.json
          fi

          git commit -m "chore(app-version): Bump app version to $NEXT_RELEASE_TAG"
          git push origin dev

          # Create Next Release Pull Request
          CAPITALIZED_PRODUCTION_BRANCH=$(echo "$PRODUCTION_BRANCH" | awk '{print toupper(substr($0, 1, 1)) tolower(substr($0, 2))}')
          BODY="## Description and Changes Made\n---"
          gh pr create --base $PRODUCTION_BRANCH --head dev --title "$CAPITALIZED_PRODUCTION_BRANCH < Dev ($NEXT_RELEASE_TAG)" --body "$(echo -e "$BODY")"
        fi
