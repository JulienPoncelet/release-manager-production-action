name: Release Manager Production
description: Automate production releases with versioning. Streamline deployments for efficient and controlled updates.

branding:
  icon: 'git-merge'
  color: 'gray-dark'

inputs:
  heroku_api_key:
    description: 'API key for accessing Heroku'
    required: true
  pat:
    description: 'Personal access token for GitHub'
    required: true
  pull_request_head_ref:
    description: 'Ref of the head commit of the pull request'
    required: true
  actor:
    description: 'GitHub actor initiating the action'
    required: true
  github_repo_full_name:
    description: 'Full name of the GitHub repository'
    required: true
  github_repo_name:
    description: 'Name of the GitHub repository'
    required: true
  heroku_app_name:
    description: 'Name of the Heroku app'
    required: true
  production_branch:
    description: 'Name of the production branch'
    required: true
  lc_manager_base_url:
    description: 'Base URL of the Rails app for release management'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout Production Branch
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.github_repo_full_name }}
        ref: ${{ inputs.production_branch }}
        fetch-depth: 0
        token: ${{ inputs.pat }}

    - name: Set Variables
      id: set-variables
      shell: bash
      env:
        PULL_REQUEST_HEAD_REF: ${{ inputs.pull_request_head_ref }}
      run: |
        IS_HOTFIX=true
        if [[ $PULL_REQUEST_HEAD_REF == "dev" ]]; then
          IS_HOTFIX=false
        fi

        echo "is_hotfix=$(echo $IS_HOTFIX)" >> $GITHUB_ENV

    - name: Install Heroku CLI
      shell: bash
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh

    - name: Deploy to Heroku
      if: ${{ inputs.heroku_app_name != '' && inputs.heroku_api_key != '' }}
      uses: akhileshns/heroku-deploy@v3.13.15
      with:
        heroku_api_key: ${{ inputs.heroku_api_key }}
        heroku_app_name: ${{ inputs.heroku_app_name }}
        heroku_email: ${{ inputs.actor }}@users.noreply.github.com

    - name: Call LC Manager to Create the Release
      shell: bash
      env:
        LC_MANAGER_BASE_URL: ${{ inputs.lc_manager_base_url }}
        GITHUB_REPOSITORY_NAME: ${{ inputs.github_repo_name }}
        IS_HOTFIX: ${{ env.is_hotfix }}
      run: |
        curl -X POST "$LC_MANAGER_BASE_URL/releases" \
          -d "repository_name=$GITHUB_REPOSITORY_NAME" \
          -d "hotfix=$IS_HOTFIX"
